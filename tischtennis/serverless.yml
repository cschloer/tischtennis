service: tischtennis
plugins:
  - serverless-finch
  #- serverless-aws-static-file-handler
  - serverless-api-gateway-throttling
  - serverless-dynamodb-local
  - serverless-offline
frameworkVersion: ">=2.24.0"

provider:
  name: aws
  profile: tischtennis
  environment: ${file(env.${opt:stage, 'dev'}.json)}
  region: us-east-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/tischtennis_${opt:stage, 'dev'}_person"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/tischtennis_${opt:stage, 'dev'}_game"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/tischtennis_${opt:stage, 'dev'}_score"

custom:
  s3Bucket: tischtennis-${opt:stage, 'dev'}-static
  client:
    bucketName: ${self:custom.s3Bucket}
    distributionFolder: static
    keyPrefix: static
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      inMemory: true
  serverless-offline:
    useDocker: true
    noTimeout: true
    #host: 0.0.0.0
    #dockerNetwork: host
  # Configures throttling settings for the API Gateway stage
  # They apply to all http endpoints, unless specifically overridden
  apiGatewayThrottling:
    maxRequestsPerSecond: 100
    maxConcurrentRequests: 50
    
package:
 individually: true
 exclude:
    - ./**

functions:
  index:
    runtime: go1.x
    handler: bin/indexBin
    package:
      include:
        - ./bin/indexBin
        - ./templates/base.html
        - ./templates/index.html
    events:
      - http:
          path: /
          method: get
  admin:
    runtime: go1.x
    handler: bin/adminBin
    package:
      include:
        - ./bin/adminBin
        - ./templates/base.html
        - ./templates/admin.html
    events:
      - http:
          path: /admin
          method: get
  person:
    runtime: go1.x
    handler: bin/personBin
    package:
      include:
        - ./bin/personBin
        - ./templates/base.html
        - ./templates/person.html
    events:
      - http:
          path: /person/{personId}
          method: get

  admin_post:
    runtime: go1.x
    handler: bin/adminPostBin
    timeout: 30
    package:
      include:
        - ./bin/adminPostBin
    events:
      - http:
          path: /admin
          method: post
  person_post:
    runtime: go1.x
    handler: bin/personPostBin
    package:
      include:
        - ./bin/personPostBin
    events:
      - http:
          path: /person
          method: post
  game_post:
    runtime: go1.x
    handler: bin/gamePostBin
    package:
      include:
        - ./bin/gamePostBin
    events:
      - http:
          path: /game
          method: post

  person_delete:
    runtime: go1.x
    handler: bin/personDeleteBin
    package:
      include:
        - ./bin/personDeleteBin
    events:
      - http:
          path: /person
          method: delete
  game_delete:
    runtime: go1.x
    handler: bin/gameDeleteBin
    package:
      include:
        - ./bin/gameDeleteBin
    events:
      - http:
          path: /game
          method: delete
#  static:
#    # TODO upgrade back to 14 when not using offline
#    runtime: nodejs12.x
#    handler: static.staticHandler
#    package:
#      include:
#        - ./static.js
#        - ./static/**
#        - ./node_modules/serverless-aws-static-file-handler/**
#        - ./node_modules/mime-db/**
#        - ./node_modules/mime-types/**
#        - ./node_modules/mustache/**
#    events:
#      - http:
#          path: static/{pathvar+}
#          method: get

resources: # CloudFormation template syntax from here on.
  Resources:
    PersonTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: tischtennis_${opt:stage, 'dev'}_person
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S

        KeySchema:
          - AttributeName: Id
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GameTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: tischtennis_${opt:stage, 'dev'}_game
        AttributeDefinitions:
          - AttributeName: PersonId
            AttributeType: S
          - AttributeName: Created
            AttributeType: N
        KeySchema:
          - AttributeName: PersonId
            KeyType: HASH
          - AttributeName: Created
            KeyType: RANGE

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ScoreTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: tischtennis_${opt:stage, 'dev'}_score
        AttributeDefinitions:
          - AttributeName: YearMonth
            AttributeType: S
          - AttributeName: Created
            AttributeType: N
        KeySchema:
          - AttributeName: YearMonth
            KeyType: HASH
          - AttributeName: Created
            KeyType: RANGE

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          #CustomErrorResponses:
          #  - ErrorCode: 404
          #    ResponseCode: 200
          #    ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation 
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]


