service: tischtennis
plugins:
  - serverless-aws-static-file-handler
frameworkVersion: ">=2.24.0"




provider:
  name: aws
  profile: tischtennis
  environment: ${file(env.${opt:stage, 'dev'}.json)}
    
package:
 individually: true
 exclude:
    - ./**

functions:
  index:
    runtime: go1.x
    handler: bin/indexBin
    package:
      include:
        - ./bin/indexBin
        - ./templates/**
    events:
      - http:
          path: /
          method: get

  getquery:
    runtime: go1.x
    handler: bin/getQueryBin
    package:
      include:
        - ./bin/getQueryBin
    events:
      - http:
          path: getQ
          method: get
          request:
            parameters:
              querystrings:
                name: true
  post:
    runtime: go1.x
    handler: bin/postBin
    package:
      include:
        - ./bin/getQueryBin
    events:
      - http:
          path: post
          method: post

  static:
    runtime: nodejs14.x
    handler: static.staticHandler
    package:
      include:
        - ./static.js
        - ./static/**
        - ./node_modules/serverless-aws-static-file-handler/**
        - ./node_modules/mime-db/**
        - ./node_modules/mime-types/**
        - ./node_modules/mustache/**
    events:
      - http:
          path: static/{pathvar+}
          method: get


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
