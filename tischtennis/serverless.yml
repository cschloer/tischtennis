service: tischtennis
plugins:
  - serverless-aws-static-file-handler
  - serverless-api-gateway-throttling
  - serverless-dynamodb-local
  - serverless-offline
frameworkVersion: ">=2.24.0"

provider:
  name: aws
  profile: tischtennis
  environment: ${file(env.${opt:stage, 'dev'}.json)}
  region: us-east-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${opt:stage, 'dev'}_person"

custom:
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      inMemory: true
  serverless-offline:
    useDocker: true
    noTimeout: true
    #host: 0.0.0.0
    #dockerNetwork: host
  # Configures throttling settings for the API Gateway stage
  # They apply to all http endpoints, unless specifically overridden
  apiGatewayThrottling:
    maxRequestsPerSecond: 100
    maxConcurrentRequests: 50
    
package:
 individually: true
 exclude:
    - ./**

functions:
  index:
    runtime: go1.x
    handler: bin/indexBin
    package:
      include:
        - ./bin/indexBin
        - ./templates/base.html
        - ./templates/index.html
    events:
      - http:
          path: /
          method: get
  admin:
    runtime: go1.x
    handler: bin/adminBin
    package:
      include:
        - ./bin/adminBin
        - ./templates/base.html
        - ./templates/admin.html
    events:
      - http:
          path: /admin
          method: get
  person:
    runtime: go1.x
    handler: bin/personBin
    package:
      include:
        - ./bin/personBin
        - ./templates/base.html
        - ./templates/person.html
    events:
      - http:
          path: /person/{personId}
          method: get

  admin_post:
    runtime: go1.x
    handler: bin/adminPostBin
    package:
      include:
        - ./bin/adminPostBin
    events:
      - http:
          path: /admin
          method: post

  static:
    # TODO upgrade back to 14 when not using offline
    runtime: nodejs12.x
    handler: static.staticHandler
    package:
      include:
        - ./static.js
        - ./static/**
        - ./node_modules/serverless-aws-static-file-handler/**
        - ./node_modules/mime-db/**
        - ./node_modules/mime-types/**
        - ./node_modules/mustache/**
    events:
      - http:
          path: static/{pathvar+}
          method: get

resources: # CloudFormation template syntax from here on.
  Resources:
    PersonTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: tischtennis_${opt:stage, 'dev'}_person
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S

        KeySchema:
          - AttributeName: Id
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GameTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: tischtennis_${opt:stage, 'dev'}_game
        AttributeDefinitions:
          - AttributeName: PersonId
            AttributeType: S
          - AttributeName: Created
            AttributeType: N
        KeySchema:
          - AttributeName: PersonId
            KeyType: HASH
          - AttributeName: Created
            KeyType: RANGE

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
